üì¶ 1. Imports

import (
	"encoding/json"
	"fmt"
	"log"
	"math/rand"
	"net/http"
	"strconv"
	"time"
	"github.com/gorilla/mux"
)
encoding/json ‚Äì to encode/decode JSON data.

fmt ‚Äì for printing to console.

log ‚Äì for error logging.

math/rand, time ‚Äì used for generating random course IDs.

net/http ‚Äì for creating HTTP servers.

strconv ‚Äì for converting integers to strings.

github.com/gorilla/mux ‚Äì powerful router for HTTP request routing.
----------------------------------------------------------------------------------------------------------------------------------
üìå 2. Models

type Course struct {
	CourseId    string  `json:"courseid"`
	CourseName  string  `json:"coursename"`
	CoursePrice int     `json:"courseprice"`
	Author      *Author `json:"author"`
}
A Course has an ID, name, price, and an author.

json:"..." tags define how fields appear in JSON.

type Author struct {
	Fullname string `json:"fulllname"`
	Website  string `json:"website"`
}
Defines the structure for an Author.
----------------------------------------------------------------------------------------------------------------------------------
üß† 3. Fake Database

var courses []Course
Simulates a database using a slice of Course.
----------------------------------------------------------------------------------------------------------------------------------
üßπ 4. Middleware Method

func (course *Course) isEmpty() bool {
	return course.CourseName == ""
}
Checks if a course object has an empty name.
----------------------------------------------------------------------------------------------------------------------------------
üõ†Ô∏è 5. main Function

func main() {
	fmt.Println("learning APIs")
	r := mux.NewRouter()
Prints a message and initializes a Gorilla Mux router.

	courses = append(courses, Course{...})
	courses = append(courses, Course{...})
Adds 2 sample courses to simulate initial data (seeding).

	r.HandleFunc("/", serverHomeRoute).Methods("GET")
	r.HandleFunc("/courses", getAllCourses).Methods("GET")
	r.HandleFunc("/course/{id}", getOneCourse).Methods("GET")
	r.HandleFunc("/course", createOneCourse).Methods("POST")
	r.HandleFunc("/course/{id}", updateOneCourse).Methods("PUT")
	r.HandleFunc("/course/{id}", deleteOneCourse).Methods("DELETE")
These define the API endpoints and connect them to handler functions.

	log.Fatal(http.ListenAndServe(":3000", r))
Starts the server on port 3000.
----------------------------------------------------------------------------------------------------------------------------------
üßæ 6. Handlers (Controllers)
üè† serverHomeRoute

func serverHomeRoute(w http.ResponseWriter, r *http.Request) {
	w.Write([]byte("<h1>Welcome to the home route!</h1>"))
}
Responds with a basic welcome HTML message.
----------------------------------------------------------------------------------------------------------------------------------
üìö getAllCourses

func getAllCourses(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-type", "application/json")
	json.NewEncoder(w).Encode(courses)
}
Sends all courses in JSON format.
----------------------------------------------------------------------------------------------------------------------------------
üîç getOneCourse

func getOneCourse(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	for _, course := range courses {
		if course.CourseId == params["id"] {
			json.NewEncoder(w).Encode(course)
			return
		}
	}
	json.NewEncoder(w).Encode("No course found with given id!")
}
Fetches a course using the id from URL.
----------------------------------------------------------------------------------------------------------------------------------
‚ûï createOneCourse

func createOneCourse(w http.ResponseWriter, r *http.Request) {
	if r.Body == nil {
		json.NewEncoder(w).Encode("Please send some data")
		return
	}
	var course Course
	json.NewDecoder(r.Body).Decode(&course)

	if course.isEmpty() {
		json.NewEncoder(w).Encode("No data in json")
		return
	}
	rand.Seed(time.Now().UnixNano())
	course.CourseId = strconv.Itoa(rand.Intn(100))
	courses = append(courses, course)
	json.NewEncoder(w).Encode(course)
}
Creates a new course:

Validates if request body is not empty.

Checks for missing name.

Generates a random CourseId.

Adds the course to the slice.

Returns the newly created course.
----------------------------------------------------------------------------------------------------------------------------------
‚úèÔ∏è updateOneCourse

func updateOneCourse(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	for index, course := range courses {
		if course.CourseId == params["id"] {
			courses = append(courses[:index], courses[index+1:]...)
			_ = json.NewDecoder(r.Body).Decode(&course)
			course.CourseId = params["id"]
			courses = append(courses, course)
			json.NewEncoder(w).Encode(course)
			return
		}
	}
	json.NewEncoder(w).Encode("course with this id not found")
}
Updates an existing course by:

Finding it by ID.

Removing it from the slice.

Replacing it with updated info.
----------------------------------------------------------------------------------------------------------------------------------
‚ùå deleteOneCourse

func deleteOneCourse(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	for idx, course := range courses {
		if course.CourseId == params["id"] {
			courses = append(courses[:idx], courses[idx+1:]...)
			json.NewEncoder(w).Encode("Successfully removed the course!")
			return
		}
	}
}
Deletes a course by slicing it out of the array.