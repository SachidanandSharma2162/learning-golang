GoLang me methods functions jaise hi hote hain, bas ye struct ke saath attached hote hain. Jaise object-oriented languages me hota hai.

🔧 What is a Method?
A method is a function with a receiver — usually a struct — jisko ye belong karta hai.

🧠 Value vs Pointer Receiver:
❌ Value receiver — doesn't change original:

func (p Person) birthday() {
    p.age += 1 // changes only local copy
}
✅ Pointer receiver — changes real value:

func (p *Person) haveBirthday() {
    p.age += 1 // modifies original struct
}

p := Person{"Arin", 22}
p.haveBirthday()
fmt.Println(p.age) // Output: 23

📦 Why use Methods?
Achieve object-oriented style.
Attach logic to a data type (struct).
Cleaner and more organized code.

----------------------------------------------------------------------------------------------------------------------------------------

🔁 What is defer?
defer kisi function call ko delay kar deta hai until the surrounding function returns.

✅ Basic Example:
func main() {
    fmt.Println("Start")
    defer fmt.Println("This is deferred")
    fmt.Println("End")
}

Output:
Start  
End  
This is deferred

🧠 defer wala line function ke end me run hota hai, chahe beech me return ho ya error ho.

⚠️ Real-World Use Case – File Handling:
file, err := os.Open("myfile.txt")
if err != nil {
    log.Fatal(err)
}
defer file.Close() // ensures file will close
Even if panic/error occurs, file will still close — safe coding practice.

🔁 Multiple Defers? (LIFO Order)

func main() {
    defer fmt.Println("One")
    defer fmt.Println("Two")
    defer fmt.Println("Three")
    fmt.Println("Main done")
}
Output:

Main done  
Three  
Two  
One
🔁 Last-in, First-out (LIFO) order — stack ki tarah.

✅ Use Cases:
File closing: defer file.Close()
Unlocking mutex: defer mu.Unlock()
Database connections
Recovering from panic