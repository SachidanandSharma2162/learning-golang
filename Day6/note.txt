GoLang me methods functions jaise hi hote hain, bas ye struct ke saath attached hote hain. Jaise object-oriented languages me hota hai.

🔧 What is a Method?
A method is a function with a receiver — usually a struct — jisko ye belong karta hai.

🧠 Value vs Pointer Receiver:
❌ Value receiver — doesn't change original:

func (p Person) birthday() {
    p.age += 1 // changes only local copy
}
✅ Pointer receiver — changes real value:

func (p *Person) haveBirthday() {
    p.age += 1 // modifies original struct
}

p := Person{"Arin", 22}
p.haveBirthday()
fmt.Println(p.age) // Output: 23

📦 Why use Methods?
Achieve object-oriented style.
Attach logic to a data type (struct).
Cleaner and more organized code.

----------------------------------------------------------------------------------------------------------------------------------------

🔁 What is defer?
defer kisi function call ko delay kar deta hai until the surrounding function returns.

✅ Basic Example:
func main() {
    fmt.Println("Start")
    defer fmt.Println("This is deferred")
    fmt.Println("End")
}

Output:
Start  
End  
This is deferred

🧠 defer wala line function ke end me run hota hai, chahe beech me return ho ya error ho.

⚠️ Real-World Use Case – File Handling:
file, err := os.Open("myfile.txt")
if err != nil {
    log.Fatal(err)
}
defer file.Close() // ensures file will close
Even if panic/error occurs, file will still close — safe coding practice.

🔁 Multiple Defers? (LIFO Order)

func main() {
    defer fmt.Println("One")
    defer fmt.Println("Two")
    defer fmt.Println("Three")
    fmt.Println("Main done")
}
Output:

Main done  
Three  
Two  
One
🔁 Last-in, First-out (LIFO) order — stack ki tarah.

✅ Use Cases:
File closing: defer file.Close()
Unlocking mutex: defer mu.Unlock()
Database connections
Recovering from panic

--------------------------------------------------------------------------------------------------------------------------------

Chalo GoLang me file handling ko full detail me ekdum base se advanced tak cover karte hain 💻📝
Yeh sab kuch seekh jaayega:

File create karna
File me likhna
File read karna
File append karna
File delete karna
Error handling
defer, os, ioutil, bufio ka use

📦 Required Packages
Go ke standard library me sab kuch milta hai:
import (
    "fmt"
    "os"
    "io/ioutil"
    "bufio"
)

1️⃣ Create and Write to a File
func main() {
    content := "Hello Arin! Learning Go file handling 🔥"

    // Create or overwrite a file
    file, err := os.Create("file1.txt")
    if err != nil {
        fmt.Println("Error creating file:", err)
        return
    }
    defer file.Close()

    _, err = file.WriteString(content)
    if err != nil {
        fmt.Println("Error writing:", err)
        return
    }

    fmt.Println("✅ File written successfully.")
}

2️⃣ Read Entire File
func main() {
    data, err := os.ReadFile("file1.txt")
    if err != nil {
        fmt.Println("Error reading file:", err)
        return
    }

    fmt.Println("📄 File content:\n", string(data))
}

3️⃣ Append to Existing File
func main() {
    file, err := os.OpenFile("file1.txt", os.O_APPEND|os.O_WRONLY, 0644)
    if err != nil {
        fmt.Println("Error opening file:", err)
        return
    }
    defer file.Close()

    _, err = file.WriteString("\nAdded this line at the end.")
    if err != nil {
        fmt.Println("Error appending:", err)
        return
    }

    fmt.Println("✏️ Text appended successfully.")
}
4️⃣ Read Line-by-Line using bufio
func main() {
    file, err := os.Open("file1.txt")
    if err != nil {
        fmt.Println("Error:", err)
        return
    }
    defer file.Close()

    scanner := bufio.NewScanner(file)
    for scanner.Scan() {
        fmt.Println(scanner.Text())
    }

    if err := scanner.Err(); err != nil {
        fmt.Println("Scan error:", err)
    }
}

5️⃣ Delete a File
func main() {
    err := os.Remove("file1.txt")
    if err != nil {
        fmt.Println("Error deleting:", err)
    } else {
        fmt.Println("🗑️ File deleted successfully.")
    }
}

⚠️ File Modes (for os.OpenFile)
Flag	Description
os.O_RDONLY	Read only
os.O_WRONLY	Write only
os.O_CREATE	Create if doesn't exist
os.O_APPEND	Append to file
os.O_TRUNC	Truncate file when open

Example:
os.OpenFile("file.txt", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
🧠 Tips:
Always use defer file.Close() after opening.
Check err != nil after every file operation.
File permissions: 0644 = owner: read/write, others: read.







You said:
func createFile(fileName string)  {
	file,err:=os.Create()

	if err!=nil {
		fmt.Println("error creating files:\n"err)
		return
	}
	defer file.Close()
} complete this program


ChatGPT said:
Bilkul bhai! Tera function createFile almost sahi hai — bas chhoti si galti hai:

os.Create() me filename dena bhool gaya

fmt.Println() me comma ke baad err ko print karna chahiye tha

✅ Complete & Corrected Version:
go
Copy
Edit
package main

import (
    "fmt"
    "os"
)

func createFile(fileName string) {
    // Create the file
    file, err := os.Create(fileName)
    if err != nil {
        fmt.Println("❌ Error creating file:\n", err)
        return
    }
    defer file.Close()

    fmt.Println("✅ File created successfully:", fileName)
}

func main() {
    createFile("example.txt")
}
📌 Output (if successful):
arduino
Copy
Edit
✅ File created successfully: example.txt
Ye program example.txt file create karega — agar already hai to overwrite karega.
--------------------------------------------------------------------------------------------------------------------------------
