GoLang utilizes the features of cloud specially unlike other programming languages,
very easy powerful language.

It is complied and interpreted as well.
Go tool can run file directly, without virtual machine

We use Golang (or Go) because itâ€™s fast, simple, and powerful â€” especially for building things like servers, APIs, cloud services, and even networking tools. Here's a quick breakdown:
Speed: Go compiles directly to machine code, so it runs really fast (almost like C or C++).
Simplicity: The syntax is super clean and minimal, making code easier to read and maintain.
Concurrency: Go has built-in support for handling many tasks at the same time (using goroutines), which is perfect for web servers and real-time apps.
Cross-Platform: You can build apps for Linux, Windows, Mac from the same codebase easily.
Big Ecosystem: Tons of libraries and tools, especially for backend and cloud development (Docker, Kubernetes, etc., are written in Go!).
Memory Efficient: Good performance without using tons of RAM.
Great for Microservices: Lightweight and efficient, ideal for building lots of small services that talk to each other.

Goroutines ka thoda intro (kyunki concurrency Go ka hero feature hai)
Case sensitive,
variable should be known in advance
everything is a type

----------------------------------------------------------------------------------------------------------------------------------

Variable:
Go ke Main Types:
Type	Example	Description
int	var x int = 10	Integer numbers (whole numbers)
float64	var y float64 = 3.14	Floating point (decimal numbers)
string	var name string = "Arin"	Text (strings)
bool	var flag bool = true	Boolean (true/false)

since LoginToken starts with capital L so it is now automatically a public variable 

Thing	Meaning
fmt.Scanln	Read input till newline (Enter key)
&variable	Memory address dena padta hai (pass by reference)
fmt.Scanf	Read input with format specifiers like %s, %d, etc.
----------------------------------------------------------------------------------------------------------------------------------

ðŸ“š GoLang Format Specifiers (Printf/Scanf ke liye)

Specifier	Use for	Example
%d	Integer (decimal)	10, 20, 30
%f	Floating point	3.14, 2.71
%.2f	Float (2 decimal places)	3.14 â†’ 3.14
%s	String	"Arin", "GoLang"
%c	Character (single letter)	'A', 'Z'
%v	Default format (any type)	Prints anything
%T	Type of the variable	int, string, float64
%b	Binary (int)	5 â†’ 101
%o	Octal (int)	8 â†’ 10
%x	Hexadecimal (int)	15 â†’ f
%%	Print a percent sign	%
----------------------------------------------------------------------------------------------------------------------------------

bufio:

âš¡ Jab use karein:

Situation	Use fmt.Scanln() ya fmt.Scanf()	Use bufio.NewReader()
Chhoti input (name, age)	Haan	Optional
Large text, multiline input	Nahin	Zaroori
Reading from files, network	Nahin	Zaroori

ðŸ“š Why bufio is good:
âœ… 1. Fast Input/Output
bufio ka kaam hota hai input/output ko buffer karna.

Ye system ke saath direct baar-baar read/write nahi karta.

Pehle memory me thoda data jama karta hai, fir ek saath process karta hai.

Isse speed badhti hai, specially large inputs ke case mein.

âœ… 2. Control milta hai
bufio.Reader aur bufio.Writer ke saath hum kaafi control le sakte hain:

ek-ek line padh sakte ho

ek-ek word ya byte padh sakte ho

error handle kar sakte ho achhe se

âœ… 3. Useful for bigger projects
Jab tum large files, big user input, servers, ya APIs ke saath kaam karoge,
to normal fmt.Scanln() chhoti moti cheezon ke liye theek hai...
Professional apps mein bufio chahiye hota hai