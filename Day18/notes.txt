ðŸš¨ Go does not have traditional enums like C/C++/Java.
But â€” Go uses const + iota to simulate enum behavior.

ðŸ§© Simulating Enums in Go using iota

iota is a keyword used in const blocks to auto-increment values.

ðŸ§  What is iota doing?
Inside the const block:
iota starts at 0 and increases by 1 automatically.
You can assign symbolic names to constants.

---------------------------------------------------------------------------------------------------------------------------------------------------

ðŸ¤” What are Generics?
Generics allow you to write functions, types, and data structures that work with any type, while maintaining type safety.

âœ… Without duplicating code
âœ… Without using interface{} and unsafe type assertions
âœ… Similar to templates in C++ or generics in Java

ðŸ”° Basic Syntax

func PrintSlice[T any](s []T) {
	for _, v := range s {
		fmt.Println(v)
	}
}
T is a type parameter.
any is shorthand for interface{} â€” it means T can be any type.

ðŸ”§ Real-World Use Cases
Generic data structures: stacks, queues, trees
Reusable utility functions: min, max, filter, map
Math functions with Number constraints